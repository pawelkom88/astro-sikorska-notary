---
import { Image } from "astro:assets";
import logo from "../../images/logo-webp.webp";

export const routes = {
  homePage: "/",
  notarialService: "/notarial-services-bristol",
  apostilleAndLegislation: "/apostille-legislation-services-bristol",
  willWritingService: "/will-writing-service",
  feesAndDisbursements: "/fees-and-disbursements",
  legalAndRegulatory: "/legal-and-regulatory-information",
  contact: "/contact-mobile-notary-bristol",
  blog: "/blog-expert-insights-notarial-practices",
  individualNotaryServices: "/individual-notary-services",
  corporateNotaryServices: "/corporate-notary-services",
};

export const links = [
  { name: "Notarial service", href: routes.notarialService },
  { name: "Apostille & Legislation", href: routes.apostilleAndLegislation },
  { name: "Will writing", href: routes.willWritingService },
  { name: "Fees", href: routes.feesAndDisbursements },
  { name: "Regulatory", href: routes.legalAndRegulatory },
  { name: "Contact", href: routes.contact },
  { name: "Blog", href: routes.blog },
];

const { isTransparent } = Astro.props;

const styles = {
  background: isTransparent ? "transparent" : "var(--primary)",
  padding: isTransparent ? "0" : "",
};
---

<header style={styles}>
  <nav class="nav-bar">
    <a class="logo" href="/">
      <Image srcset={logo + " 1x, " + logo + " 2x"} class="logo" width="80" height="80" src={logo} alt="Sikorska notary logo" />
    </a>
    <ul class="nav-links">
      {
        links.map(link => (
          <li class="nav-link">
            <a href={link.href}>{link.name}</a>
          </li>
        ))
      }
    </ul>

    <button type="button" class="btn cta-btn"> Make an enquiry</button>
    <div
      role="button"
      class="hamburger"
      tabindex="0"
      aria-expanded="false"
      aria-label="show navigation menu">
      <span class="line"></span>
      <span class="line"></span>
      <span class="line"></span>
    </div>
  </nav>
</header>
<div class="overlay"></div>
<div class="modal" role="alertdialog" aria-modal="true" aria-labelledby="dialog_label">
  <span class="close" role="button" tabindex="0">close</span>
  <h2 class="heading" id="dialog_label">Make an Enquiry</h2>
  <form class="form" action="https://api.web3forms.com/submit" method="POST">
    <input type="hidden" name="redirect" value="/success" />
    <input type="hidden" name="subject" value="New message from your website" />
    <input type="hidden" name="apikey" value="e78b38a7-90c7-4e93-9b00-da8a681984f6" />
    <label for="nameModal">Name:</label>
    <input id="nameModal" title="name" type="text" placeholder="John Smith" required />
    <label for="e-mailModal">E-mail:</label>
    <input
      id="e-mailModal"
      name="e-mailModal"
      title="e-mail"
      type="text"
      placeholder="JohnSmith@gmail.com"
      required
    />
    <label for="messageModal">Your enquiry:</label>
    <textarea
      title="message"
      name="messageModal"
      id="messageModal"
      cols="40"
      rows="10"
      placeholder="Your message"
      required></textarea>
    <input id="botcheck" type="checkbox" name="botcheck" style="display: none" />
    <input type="checkbox" name="botcheck" class="hidden" style="display: none" />
    <button type="submit" class="btn form_btn btn-focus">Submit</button>
  </form>
</div>

<div role="navigation" class="mobile__menu" aria-label="mobile menu">
  <ul class="mobile__menu-links">
    {
      links.map(link => {
        return (
          <li class="mobile__menu-link">
            <a href={link.href}>{link.name}</a>
          </li>
        );
      })
    }
  </ul>
  <div class="mobile__menu-contact">
    <a href="tel:447401388094" aria-label="Call Patrycja Sikorska">
      <svg
        fill="#69502B"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 53.942 53.942"
        xml:space="preserve">
        <path
          d="M53.364 40.908c-2.008-3.796-8.981-7.912-9.288-8.092-.896-.51-1.831-.78-2.706-.78-1.301 0-2.366.596-3.011 1.68-1.02 1.22-2.285 2.646-2.592 2.867-2.376 1.612-4.236 1.429-6.294-.629L17.987 24.467c-2.045-2.045-2.233-3.928-.632-6.291.224-.309 1.65-1.575 2.87-2.596.778-.463 1.312-1.151 1.546-1.995.311-1.123.082-2.444-.652-3.731-.173-.296-4.291-7.27-8.085-9.277a4.947 4.947 0 0 0-2.306-.573 4.908 4.908 0 0 0-3.49 1.445L4.7 3.986C.686 7.999-.767 12.548.379 17.506c.956 4.132 3.742 8.529 8.282 13.068l14.705 14.705c5.746 5.746 11.224 8.66 16.282 8.66h.001c3.72 0 7.188-1.581 10.305-4.698l2.537-2.537a4.908 4.908 0 0 0 .873-5.796z"
        ></path>
      </svg>
      <span class="visible-hidden">Call Patrycja Sikorska</span>
    </a>
    <a href="mailto:ps@sikorskanotary.co.uk" aria-label="Email Patrycja Sikorska">
      <svg
        fill="#69502B"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 474 474"
        xml:space="preserve">
        <path
          d="M437.5 59.3h-401C16.4 59.3 0 75.7 0 95.8v282.4c0 20.1 16.4 36.5 36.5 36.5h401c20.1 0 36.5-16.4 36.5-36.5V95.8c0-20.1-16.4-36.5-36.5-36.5zm-5.3 27L239.5 251.1 46.8 86.3h385.4zM447 378.2c0 5.2-4.3 9.5-9.5 9.5h-401c-5.2 0-9.5-4.3-9.5-9.5V104.9l203.7 174.2c.1.1.3.2.4.3.1.1.3.2.4.3.3.2.5.4.8.5.1.1.2.1.3.2l1.2.6c.1 0 .2.1.3.1.3.1.6.3 1 .4.1 0 .3.1.4.1.3.1.6.2.9.2.1 0 .3.1.4.1.3.1.7.1 1 .2h.3c.4 0 .9.1 1.3.1s.9 0 1.3-.1h.3c.3 0 .7-.1 1-.2.1 0 .3-.1.4-.1.3-.1.6-.2.9-.2.1 0 .3-.1.4-.1.3-.1.6-.2 1-.4.1 0 .2-.1.3-.1l1.2-.6c.1-.1.2-.1.3-.2.3-.2.5-.3.8-.5.1-.1.3-.2.4-.3.1-.1.3-.2.4-.3L447 109.2v269z"
        ></path>
      </svg>
      <span class="visible-hidden">Email Patrycja Sikorska</span>
    </a>
  </div>
</div>

<script>
  const hamburger = document.querySelector(".hamburger") as HTMLElement;
  const mobileLink = document.querySelectorAll(".mobile__menu-link");
  const contactLink = mobileLink[mobileLink.length - 1];
  const body = document.querySelector("body") as HTMLElement;
  const ctaBtn = document.querySelector(".cta-btn") as HTMLButtonElement;
  const modal = document.querySelector(".modal") as HTMLDivElement;
  const overlay = document.querySelector(".overlay") as HTMLDivElement;
  const closeBtn = document.querySelector(".close") as HTMLButtonElement;

  // open mobile menu by clicking on hamburger icon
  hamburger.addEventListener("click", openMobileMenu);

  // close mobile menu after clicking in contact
  contactLink.addEventListener("click", openMobileMenu);

  ctaBtn.addEventListener("click", addActiveClasses);

  // close modal after clicking on overlay
  overlay.addEventListener("click", removeActiveClasses);

  // close modal after clickingclose button
  closeBtn?.addEventListener("click", removeActiveClasses);

  // close modal using ESC key
  document.addEventListener("keydown", e => {
    if (e.key === "Escape") {
      removeActiveClasses();
    }
  });

  // close modal ENTER key Enter when button is focused
  closeModalByKey();

  trapFocus();

  //////////////////////////////////////
  ///// functions declarations ///////
  //////////////////////////////////////

  function removeActiveClasses() {
    modal.classList.remove("modal-active");
    overlay.classList.remove("modal-active");
  }

  function closeModalByKey() {
    document.addEventListener(
      "focusin",
      () => {
        if (document.activeElement === closeBtn) {
          closeBtn?.addEventListener("keydown", e => {
            if (e.key === "Enter") {
              removeActiveClasses();
            }
          });
        }
      },
      true
    );
  }

  function addActiveClasses() {
    modal.classList.add("modal-active");
    overlay.classList.add("modal-active");
    closeBtn?.focus({ preventScroll: true });
  }

  function openMobileMenu() {
    const mobileMenu = document.querySelector(".mobile__menu") as HTMLElement;
    const lines = document.querySelectorAll(".line");

    mobileMenu.classList.toggle("menu-open");
    body.classList.toggle("overflow");

    lines.forEach(line => {
      line.classList.toggle("open");
      line.classList.toggle("hamburger-open");
    });

    if (hamburger.getAttribute("aria-expanded") === "false") {
      hamburger.setAttribute("aria-expanded", "true");
    }
    hamburger.setAttribute("aria-expanded", "false");
  }

  function trapFocus() {
    const firstEl = closeBtn;
    const lastEl = document.querySelector(".btn-focus");

    modal.addEventListener("keydown", e => {
      const submitBtn = document.querySelector(".form_btn") as HTMLButtonElement;
      const isTabPressed = e.key === "Tab";
      const hasFocus = document.activeElement;

      if (!isTabPressed) {
        return;
      }

      if (e.shiftKey) {
        if (hasFocus === firstEl) {
          submitBtn.focus();
          e.preventDefault();
        }
      } else {
        if (hasFocus === lastEl) {
          closeBtn.focus();
          e.preventDefault();
        }
      }
    });
  }

  // function maternityModal() {
  //   const maternityModal = document.querySelectorAll(".maternity-modal");
  //   const closeBtn = document.querySelector(".close-maternity-modal");

  //   setTimeout(() => {
  //     maternityModal.forEach(modal => modal.classList.add("modal-active"));
  //   }, 4000);

  //   closeBtn?.addEventListener("click", () => {
  //     document
  //       .querySelectorAll(".maternity-modal")
  //       .forEach(modal => modal.classList.remove("modal-active"));
  //   });
  // }

  // maternityModal();
</script>
